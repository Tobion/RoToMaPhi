unit uVerwaltung;




--> Aus Client-Verwaltung

procedure TVerwaltung.KarteZiehen(const Spieler: TSpieler; Strafe: Boolean = false);
var i: Integer;
begin
if (GetZiehstapelKartenAnzahl < GetZiehkartenAnzahl) then
  Differenz := GetZiehkartenAnzahl - GetZiehstapelKartenAnzahl
  else Differenz := 0;
with Spielregeln.Spielzustand do
begin
if (Ziehkarten > 0) and not Strafe then // Ziehkarten durch Söldner etc.
  begin
  for i:=1 to Ziehkarten do
    Spieler.KarteAufnehmen(Ziehstapel.PopKarte);
  Spielregeln.ZiehkartenAufheben;
  end
  else if Strafe then // Strafe durch Verstoß gegen Tribunal
    begin
    for i:=1 to Strafkarten do
      Spieler.KarteAufnehmen(Ziehstapel.PopKarte);
    Spielregeln.SperreAufheben;
    end
    else Spieler.KarteAufnehmen(Ziehstapel.PopKarte); // normal eine Karte ziehen
end;
end;

<--





function TVerwaltung.KarteAblegen(const Spieler: TSpieler; const KartenID: Longword): Longword;
// liefer MsgID <> 0, falls gelegte Karte eine Sonderfunktion hat
var Karte: TKarte;
begin
  Result := 0;
  Karte := Spieler.KarteAblegen(KartenID);
  Ablagestapel.PushKarte(Karte);

  if Spielregeln.Sperrpruefung(Karte) then
    KarteZiehen(Spieler, true);
  Spielregeln.Ziehkarten(Karte);
  Spielregeln.WunschfarbeAufheben;

  case Karte.GetTyp of
    7: Result := Msg_Server_FarbWunsch;
    10: begin
        if (Spielregeln.Spielzustand.Ziehkarten = 0) then
          Aussetzen := true;
        Protokoll.Ueberpruefung(Spieler.Name, Spieler.ID, KartenID, Karte.GetTyp, RestKarten, Karte.GetName, Karte.GetFarbe, FarbWunsch);
        end;
    11: Result := Msg_Server_FarbWunsch;
    12: Result := Msg_Server_KartenHalbieren;
    14: Result := Msg_Server_Spionage;
    15: begin
        Result := Msg_Server_Tauschen;
        Protokoll.Ueberpruefung(Spieler.Name, Spieler.ID, KartenID, Karte.GetTyp, RestKarten, Karte.GetName, Karte.GetFarbe, FarbWunsch);
        end;
    17: Result := Msg_Server_Sperren;
    else begin
         RestKarten:=Spieler.CountKarten;
         Protokoll.Ueberpruefung(Spieler.Name, Spieler.ID, KartenID, Karte.GetTyp, RestKarten, Karte.GetName, Karte.GetFarbe, FarbWunsch);
         end;
    end;

  RestKarten := Spieler.CountKarten;
end;





procedure TVerwaltung.SetWunschFarbe(const Spieler: TSpieler; const WunschFarbe: TFarben);
begin
  Spielregeln.Spielzustand.WunschFarbe := WunschFarbe;
  if Spielregeln.FarbSperrpruefung(WunschFarbe) then
    KarteZiehen(Spieler, true);
end;





procedure TVerwaltung.SetSperre(const Sperre: Byte);
begin
  Spielregeln.Sperren(Sperre);
end;





procedure TVerwaltung.KartenTauschen(const Spieler1, Spieler2: TSpieler);
var TmpListe: TList;
begin
  TmpListe := TList.Create;
  TmpListe.Assign(Spieler1.KartenListe);
  Spieler1.KartenListe.Assign(Spieler2.KartenListe);
  Spieler2.KartenListe.Assign(TmpListe);
  TmpListe.Free;
  Protokoll.KartenGetauscht(Spieler1.Name,Spieler2.Name,Spieler1.ID,Spieler2.ID);
end;





procedure TVerwaltung.Spionage(const SpielerFrom, SpielerTo: TSpieler; SpioKartenID: Longword);
begin
  SpielerTo.KarteAufnehmen(SpielerFrom.KarteAblegen(SpioKartenID));
end;